{
  "2D Array": [
    {
      "image_path": "gallery_assets_3_2DArray/2D_Array_001_Header1.png",
      "celltype": "Header",
      "css": "border: 3px solid #ED6A5A;height: 150px; width: auto;",
      "code": "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\n\n\ndef disp(x, sep=&#39;.0f&#39;, annot=False,  figsize=(5,5)): \n    plt.figure(figsize =figsize)\n    plt.axis(\"off\")\n    sns.heatmap(x,annot=annot,fmt=sep, cmap=\"YlGnBu\", cbar=False); # Change range with: vmin=0, vmax=1"
    },
    {
      "image_path": "gallery_assets_3_2DArray/2D_Array_002_Checkboard.png",
      "celltype": "Normal",
      "css": "border: 3px solid #007AB8;height: 150px; width: auto;",
      "code": "pixX = 15\npixY = 15\narray = [[(i + j) % 2 for i in range(pixX)] for j in range(pixY)]\ndisp(array)"
    },
    {
      "image_path": "gallery_assets_3_2DArray/2D_Array_003_Full.png",
      "celltype": "Normal",
      "css": "border: 3px solid #007AB8;height: 150px; width: auto;",
      "code": "array = np.full((10, 10), 10)\ndisp(array)"
    },
    {
      "image_path": "gallery_assets_3_2DArray/2D_Array_004_LinearDiagonal.png",
      "celltype": "Normal",
      "css": "border: 3px solid #007AB8;height: 150px; width: auto;",
      "code": "# Linear diagonal\narray = [[i + j for i in range(pixX)] for j in range(pixY)]\ndisp(array)"
    },
    {
      "image_path": "gallery_assets_3_2DArray/2D_Array_005_LinearDiagonalNumpy.png",
      "celltype": "Normal",
      "css": "border: 3px solid #007AB8;height: 150px; width: auto;",
      "code": "# alternative with numpy\narray = np.fromfunction(lambda i, j: i + j, shape=(15, 15))\ndisp(array)"
    },
    {
      "image_path": "gallery_assets_3_2DArray/2D_Array_006_axis1Gradient.png",
      "celltype": "Normal",
      "css": "border: 3px solid #007AB8;height: 150px; width: auto;",
      "code": "# Linear in axis1 direction\narray = [[i for i in range(pixX)] for j in range(pixY)]\ndisp(array)"
    },
    {
      "image_path": "gallery_assets_3_2DArray/2D_Array_007_CountingUp.png",
      "celltype": "Normal",
      "css": "border: 3px solid #007AB8;height: 150px; width: auto;",
      "code": "# Linear counter hori\narray = [[i * pixY + j for i in range(pixX)] for j in range(pixY)]\ndisp(array)"
    },
    {
      "image_path": "gallery_assets_3_2DArray/2D_Array_008_Random.png",
      "celltype": "Normal",
      "css": "border: 3px solid #007AB8;height: 150px; width: auto;",
      "code": "# Random\narray = np.random.randint(0, 10, size=(15, 15))\ndisp(array)"
    },
    {
      "image_path": "gallery_assets_3_2DArray/2D_Array_009_Sinus.png",
      "celltype": "Normal",
      "css": "border: 3px solid #007AB8;height: 150px; width: auto;",
      "code": "# sinudial fromfunction\narray = np.fromfunction(lambda i, j: np.sin(j), (15, 15))\ndisp(array, sep=\".1f\")"
    },
    {
      "image_path": "gallery_assets_3_2DArray/2D_Array_010_MeshGrid.png",
      "celltype": "Normal",
      "css": "border: 3px solid #007AB8;height: 150px; width: auto;",
      "code": "x = np.linspace(0, 15, 15)\ny = np.linspace(0, 15, 15)\nxx, yy = np.meshgrid(x, y, sparse=False)\ndisp(xx)"
    },
    {
      "image_path": "gallery_assets_3_2DArray/2D_Array_011_MeshGrid.png",
      "celltype": "Normal",
      "css": "border: 3px solid #007AB8;height: 150px; width: auto;",
      "code": "x = np.linspace(0, 15, 15)\ny = np.linspace(0, 15, 15)\nxx, yy = np.meshgrid(x, y, sparse=False)\ndisp(yy)"
    },
    {
      "image_path": "gallery_assets_3_2DArray/2D_Array_012_Gradient.png",
      "celltype": "Normal",
      "css": "border: 3px solid #007AB8;height: 150px; width: auto;",
      "code": "x = np.linspace(0, 15, 15)\ny = np.linspace(0, 15, 15)\nxx, yy = np.meshgrid(x, y, sparse=False)\narray = xx + yy\ndisp(array)"
    },
    {
      "image_path": "gallery_assets_3_2DArray/2D_Array_013_GradientShift.png",
      "celltype": "Normal",
      "css": "border: 3px solid #007AB8;height: 150px; width: auto;",
      "code": "x = np.arange(-pixX // 2, pixX // 2)\ny = np.arange(-pixY // 2, pixY // 2)\nxx, yy = np.meshgrid(x, y, sparse=False)\narray = xx + yy\narray[array <= 0] = 0\ndisp(array)"
    },
    {
      "image_path": "gallery_assets_3_2DArray/2D_Array_014_LinearIncreaseFromCenter.png",
      "celltype": "Normal",
      "css": "border: 3px solid #007AB8;height: 150px; width: auto;",
      "code": "# Linear increase from center in all directions\npixX, pixY = (15, 15)\nx, y = np.meshgrid(np.linspace(-1, 1, pixX), np.linspace(-1, 1, pixY), sparse=False)\narray = np.sqrt(x**2 + y**2)\ndisp(array, sep=\".1f\")"
    },
    {
      "image_path": "gallery_assets_3_2DArray/2D_Array_015_Gaussian.png",
      "celltype": "Normal",
      "css": "border: 3px solid #007AB8;height: 150px; width: auto;",
      "code": "# Gaussian\npixX, pixY = (15, 15)\nx, y = np.meshgrid(np.linspace(-1, 1, pixX), np.linspace(-1, 1, pixY))\nd = np.sqrt(x**2 + y**2)\nsigma, mu = 1.0, 0.0\narray = np.exp(-((d - mu) ** 2 / (2.0 * sigma**2)))\ndisp(array, sep=\".1f\")"
    },
    {
      "image_path": "gallery_assets_3_2DArray/2D_Array_016_Gaussian2.png",
      "celltype": "Normal",
      "css": "border: 3px solid #007AB8;height: 150px; width: auto;",
      "code": "# One Minus Gaussian and smaller sigma\npixX, pixY = (15, 15)\nx, y = np.meshgrid(np.linspace(-1, 1, pixX), np.linspace(-1, 1, pixY))\nd = np.sqrt(x**2 + y**2)\nsigma, mu = 0.4, 0.0\narray = 1 - np.exp(-((d - mu) ** 2 / (2.0 * sigma**2)))\ndisp(array, sep=\".1f\")"
    },
    {
      "image_path": "gallery_assets_3_2DArray/2D_Array_017_Circle.png",
      "celltype": "Normal",
      "css": "border: 3px solid #007AB8;height: 150px; width: auto;",
      "code": "shape = (31,31)\nx,y = np.indices(shape)\ndx = int(shape[0]/2)\ndy = int(shape[1]/2)\nradius = 13.5\ncirc = (x - dx) ** 2 + (y - dy) ** 2 <= radius**2\narray = np.zeros(shape)\narray[circ] = 1\ndisp(array)"
    },
    {
      "image_path": "gallery_assets_3_2DArray/2D_Array_018_Part.png",
      "celltype": "Normal",
      "css": "border: 3px solid #007AB8;height: 150px; width: auto;",
      "code": "shape = (31,31)\nradius = 31\nshape = (2 * shape[0], 2 * shape[1]) # factor 2 because cutting later\nx,y = np.indices(shape)\ndx = int(shape[0]/2)\ndy = int(shape[1]/2)\ncirc = (x - dx) ** 2 + (y - dy) ** 2 <= radius**2\narray = np.zeros(shape)\narray[circ] = 1\nregion1 = int(shape[0]/2)\nregion2 = int(shape[1]/2)\narray = array[0:region1,0:region2]\ndisp(array)"
    },
    {
      "image_path": "gallery_assets_3_2DArray/2D_Array_019_Spiral.png",
      "celltype": "Normal",
      "css": "border: 3px solid #007AB8;height: 150px; width: auto;",
      "code": "# spiral  # code inspired from : https://stackoverflow.com/questions/36834505/creating-a-spiral-array-in-python\npixX, pixY = (15, 15)\n\n\ndef spiral(width, height):\n    NORTH, S, W, E = (0, -1), (0, 1), (-1, 0), (1, 0)  # directions\n    turn_right = {NORTH: E, E: S, S: W, W: NORTH}  # old -> new direction\n\n    if width < 1 or height < 1:\n        raise ValueError\n    x, y = width // 2, height // 2  # start near the center\n    dx, dy = NORTH  # initial direction\n    matrix = [[None] * width for _ in range(height)]\n    count = 0\n    while True:\n        count += 1\n        matrix[y][x] = count  # visit\n        # try to turn right\n        new_dx, new_dy = turn_right[dx, dy]\n        new_x, new_y = x + new_dx, y + new_dy\n        if (\n            0 <= new_x <= width\n            and 0 <= new_y <= height\n            and matrix[new_y][new_x] is None\n        ):  # can turn right\n            x, y = new_x, new_y\n            dx, dy = new_dx, new_dy\n        else:  # try to move straight\n            x, y = x + dx, y + dy\n            if not (0 <= x < width and 0 <= y < height):\n                return matrix  # nowhere to go\n\n\nnum_pixels = 19\narray = spiral(pixX, pixY)\ndisp(array)"
    },
    {
      "image_path": "gallery_assets_3_2DArray/2D_Array_020_StepFunction.png",
      "celltype": "Normal",
      "css": "border: 3px solid #007AB8;height: 150px; width: auto;",
      "code": "# linear_step fromfunction with transition\ndef linear_step_func(x, x0, x1):\n    y = np.piecewise(\n        x,\n        [x < x0, (x >= x0) & (x <= x1), x > x1],\n        [0.0, lambda x: x / (x1 - x0) + x0 / (x0 - x1), 1.0],\n    )\n    return y\n\n\narray = np.fromfunction(lambda i, j: linear_step_func(j, 3, 12), (15, 15))\ndisp(array, sep=\".1f\")"
    },
    {
      "image_path": "gallery_assets_3_2DArray/2D_Array_021_Fields.png",
      "celltype": "Normal",
      "css": "border: 3px solid #007AB8;height: 150px; width: auto;",
      "code": "# from 4 regions\nregion0 = np.zeros((10, 8))\nregion1 = np.ones((10, 7))\nregion_top = np.concatenate([region0, region1], axis=1)\n\nregion2 = np.full((5, 5), 2)\nregion3 = np.full((5, 10), 3)\nregion_bottom = np.concatenate([region2, region3], axis=1)\n\narray = np.concatenate([region_top, region_bottom], axis=0)\ndisp(array)"
    },
    {
      "image_path": "gallery_assets_3_2DArray/2D_Array_022_FieldsOther.png",
      "celltype": "Normal",
      "css": "border: 3px solid #007AB8;height: 150px; width: auto;",
      "code": "# prepare some coordinates\nx, y = np.indices((8, 8))\n\ncube1 = (x < 3) & (y < 3)\ncube2 = (x >= 5) & (y >= 5)\nlink = np.sqrt(abs(x - y)) <= 1\narray = np.zeros(x.shape)\narray[link] = 14\narray[cube1] = 10\narray[cube2] = 30\ndisp(array)"
    },
    {
      "image_path": "gallery_assets_3_2DArray/2D_Array_023_rot90.png",
      "celltype": "Normal",
      "css": "border: 3px solid #007AB8;height: 150px; width: auto;",
      "code": "disp(np.rot90(array))"
    },
    {
      "image_path": "gallery_assets_3_2DArray/2D_Array_024_fliplr.png",
      "celltype": "Normal",
      "css": "border: 3px solid #007AB8;height: 150px; width: auto;",
      "code": "disp(np.fliplr(array))"
    },
    {
      "image_path": "gallery_assets_3_2DArray/2D_Array_025_flipud.png",
      "celltype": "Normal",
      "css": "border: 3px solid #007AB8;height: 150px; width: auto;",
      "code": "disp(np.flipud(array))"
    },
    {
      "image_path": "gallery_assets_3_2DArray/2D_Array_026_RegionDL.png",
      "celltype": "Normal",
      "css": "border: 3px solid #007AB8;height: 150px; width: auto;",
      "code": "array=np.zeros((10, 10))\nfor i in range(len(array)):\n    array[i,0:i]=1\n\ndisp(array)"
    },
    {
      "image_path": "gallery_assets_3_2DArray/2D_Array_027_RegionDR.png",
      "celltype": "Normal",
      "css": "border: 3px solid #007AB8;height: 150px; width: auto;",
      "code": "array=np.zeros((10, 10))\nfor i in range(len(array)):\n    array[i,0:i]=1\n\narray =np.rot90(array)\ndisp(array)"
    },
    {
      "image_path": "gallery_assets_3_2DArray/2D_Array_028_Rolled0.png",
      "celltype": "Normal",
      "css": "border: 3px solid #007AB8;height: 150px; width: auto;",
      "code": "arrayX = np.roll(array, 15, axis=0)\ndisp(arrayX)"
    },
    {
      "image_path": "gallery_assets_3_2DArray/2D_Array_029_Rolled1.png",
      "celltype": "Normal",
      "css": "border: 3px solid #007AB8;height: 150px; width: auto;",
      "code": "arrayX = np.roll(array, 15, axis=1)\ndisp(arrayX)"
    }
  ]
}